// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18034
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace IniReaderTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("IniReaderReadStrings")]
    public partial class IniReaderReadStringsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "IniReaderReadStrings.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "IniReaderReadStrings", "Given ini files as strings\r\n  I want to test various aspects of section handling\r" +
                    "\n  And apects of properties and variables handling", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Read an unnamed section")]
        public virtual void ReadAnUnnamedSection()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Read an unnamed section", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 7
    testRunner.Given("file with lines", "[section1]", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 11
    testRunner.When("I get unnamed section section1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 12
 testRunner.Then("The section id read is section1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Read a named section")]
        public virtual void ReadANamedSection()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Read a named section", ((string[])(null)));
#line 14
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 15
    testRunner.Given("file with lines", "[section1 \"name1\"]", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 19
    testRunner.When("I get named section section1 with name=name1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 20
    testRunner.Then("The section id read is section1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 21
    testRunner.And("The section name is name1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("File with empty section id throws exception")]
        public virtual void FileWithEmptySectionIdThrowsException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("File with empty section id throws exception", ((string[])(null)));
#line 23
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 24
testRunner.Given("file with lines", "[]", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 28
    testRunner.When("I load string", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 29
    testRunner.Then("The error type should be System.InvalidOperationException", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("File without section with attributes throws exception")]
        public virtual void FileWithoutSectionWithAttributesThrowsException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("File without section with attributes throws exception", ((string[])(null)));
#line 31
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 32
testRunner.Given("file with lines", "host = google.com.br\r\nport = 81", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 37
    testRunner.When("I load string", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 38
    testRunner.Then("The error type should be System.InvalidOperationException", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test unnamed section with attributes can be handled")]
        public virtual void TestUnnamedSectionWithAttributesCanBeHandled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test unnamed section with attributes can be handled", ((string[])(null)));
#line 40
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 41
testRunner.Given("file with lines", "[section]\r\nhost = google.com.br\r\nport = 81", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 47
    testRunner.When("I get unnamed section section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 48
    testRunner.Then("The section id read is section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 49
    testRunner.And("the host attribute is google.com.br", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 50
    testRunner.And("the port attribute is 81", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test unnamed section with attribute without value can be handled")]
        public virtual void TestUnnamedSectionWithAttributeWithoutValueCanBeHandled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test unnamed section with attribute without value can be handled", ((string[])(null)));
#line 52
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 53
testRunner.Given("file with lines", "[section]\r\nhost = google.com.br\r\nport = 81\r\nuseAlternatePort", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 60
    testRunner.When("I get unnamed section section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 61
    testRunner.Then("The section id read is section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 62
    testRunner.And("the host attribute is google.com.br", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 63
    testRunner.And("the port attribute is 81", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 64
    testRunner.And("the useAlternatePort attribute is true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Duplicate attribute not ignoring duplicates throws exception")]
        public virtual void DuplicateAttributeNotIgnoringDuplicatesThrowsException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Duplicate attribute not ignoring duplicates throws exception", ((string[])(null)));
#line 66
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 67
testRunner.Given("file with lines", "[section]\r\nhost = google.com.br\r\nport = 81\r\nport = 82\r\nuseAlternatePort", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 75
    testRunner.When("I load string", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 76
    testRunner.Then("The error type should be System.Data.DuplicateNameException", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test unnamed section with starting tabs can be handled")]
        public virtual void TestUnnamedSectionWithStartingTabsCanBeHandled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test unnamed section with starting tabs can be handled", ((string[])(null)));
#line 78
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 79
testRunner.Given("file with lines", "               [section]\r\nhost = google.com.br\r\nport = 81\r\nuseAlternatePort", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 86
testRunner.When("I get unnamed section section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 87
    testRunner.Then("The section id read is section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 88
    testRunner.And("the host attribute is google.com.br", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 89
    testRunner.And("the port attribute is 81", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 90
    testRunner.And("the useAlternatePort attribute is true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test unnamed section with tabs in attributes can be handled")]
        public virtual void TestUnnamedSectionWithTabsInAttributesCanBeHandled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test unnamed section with tabs in attributes can be handled", ((string[])(null)));
#line 92
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 93
testRunner.Given("file with lines", "[section]\r\n        host = google.com.br\r\n                port = 81\r\n      useAlte" +
                    "rnatePort", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 100
testRunner.When("I get unnamed section section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 101
    testRunner.Then("The section id read is section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 102
    testRunner.And("the host attribute is google.com.br", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 103
    testRunner.And("the port attribute is 81", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 104
    testRunner.And("the useAlternatePort attribute is true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test multiple unnamed sections in file can be handled")]
        public virtual void TestMultipleUnnamedSectionsInFileCanBeHandled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test multiple unnamed sections in file can be handled", ((string[])(null)));
#line 106
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 107
testRunner.Given("file with lines", "[server]\r\nhost = google.com\r\nport = 81\r\nuseAlternatePort\r\n[webservice]\r\nhost=goog" +
                    "le.com.br\r\nport=91\r\npassword=123123", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 118
    testRunner.When("I load string", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 119
    testRunner.Then("the attribute host from section server is google.com", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 120
    testRunner.Then("the attribute port from section server is 81", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 121
    testRunner.Then("the attribute host from section webservice is google.com.br", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 122
    testRunner.Then("the attribute port from section webservice is 91", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 123
    testRunner.Then("the attribute password from section webservice is 123123", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test unnamed section with reading inexistent attribute should return null")]
        public virtual void TestUnnamedSectionWithReadingInexistentAttributeShouldReturnNull()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test unnamed section with reading inexistent attribute should return null", ((string[])(null)));
#line 126
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 127
testRunner.Given("file with lines", "[server]\r\nhost = google.com.br\r\nport = 81\r\nuseAlternatePort", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 134
testRunner.When("I load string", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 135
    testRunner.Then("the attribute host from section server is google.com.br", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 136
    testRunner.And("the attribute port from section server is 81", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 137
    testRunner.And("the attribute inexistentAttribute from section server contains null value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
